## Unified Approach to Speech Synthesis and Recognition
## - Voice authentication database plug-in.
##
## AUTHOR : Matthias Wolff
## PACKAGE: uasr-data/vau/scripts/dlabpro
##

## -- Worker functions --

## Computes UASR feature vector files from the signal files listed in 
## <code>&lt;uasr&#46;flist&#46;all&gt;</code>.
##
## @cgen:index
## @param sMode string
##          Operation mode, one of the following
##          <p><table>
##            <tr>
##              <td>"pfv"</td>
##              <td>UASR primary features, see <a class="code" 
##                href="#clp_-CMD_DB_pfv">-CMD_DB_pfv</a></td>
##            </tr>
##            <tr>
##              <td>"sfv" <sup>1)</sup></td>
##              <td>UASR secondary features, see <a class="code" 
##                href="#clp_-CMD_DB_sfv">-CMD_DB_sfv</a></td>
##            </tr>
##            <tr>
##              <td>"lfv" <sup>1)</sup></td>
##              <td>UASR least significant secondary features, see
##                <a class="code" href="#clp_-CMD_DB_lfv">-CMD_DB_lfv</a></td>
##            </tr>
##            <tr>
##              <td>"rnd"</td>
##              <td>Random features, see <a class="code" 
##                href="#clp_-CMD_DB_rnd">-CMD_DB_rnd</a></td>
##            </tr>
##          </table></p>
##          <sup>1)</sup> Mode requires a feature information file
##          <code>&lt;uasr.dir.model&gt;/feainfo.object</code> as generated by 
##          the UASR HMM training tool <code>HMM.xtp trn</code>.
## @return 0 if successful, -1 otherwise.
## @global &lt;uasr.dir.data&gt;  R
## @global &lt;uasr.dir.log&gt;   R
## @global &lt;uasr.dir.model&gt; R
## @global &lt;uasr.dir.sig&gt;   R
## @global &lt;uasr.flist.all&gt; R
## @global &lt;uasr.pfa.dim&gt;   R
## @global &lt;uasr.sfa.dim&gt;   R
function -VAU_xfa(sMode)
{
  data idFea;                                                                   # (Primary) feature vectors
  data idSfv;                                                                   # Secondary feature vectors
  data idLfv;                                                                   # Least significant feature vectors
  var  sPath;                                                                   # Fully qualified path to feature file
  var  nDim;                                                                    # Feature vector dimension
  var  nXR; 250 350 1 nXR -intv;                                                # rnd: Random feature sequence length

  ## Initialize                                                                 # -------------------------------------
  "\n\n// "                                                               -MSG; # Screen protocol
  "pfv" sMode == if "Primary" else                                              # Screen protocol
  "sfv" sMode == if "Secondary" else                                            # Screen protocol
  "lfv" sMode == if "Least significant" else                                    # Screen protocol
  "rnd" sMode == if "Random" else "???"                                         # Screen protocol
  end end end end                                                         -MSG; # Screen protocol
  " feature analysis for GMM speaker classifier"                          -MSG; # Screen protocol
  var  nMsf;    ( "sfa.dim" 24 -CFG_get       ) nMsf    =;                      # Number of most significant features
  var  sModDir; ( "model" ""   -CFG_get_path  ) sModDir =;                      # Get model folder
  var  sSigDir; ( "sig"   ""   -CFG_get_path  ) sSigDir =;                      # Get signal folder
  var  sLogDir; ( "log"   ""   -CFG_get_path  ) sLogDir =;                      # Get log folder
  file iF;      ( "all"   ""   -CFG_get_flist ) iF -set flist;                  # Complete file list
  "sig.label" "none" -CFG_set;                                                  # Disable signal labeling

  ## Load models                                                                # -------------------------------------
  ( "sfv" sMode == ) ( "lfv" sMode == ) ||  if                                  # Computing secondary features >>
    "\n   - Feature info  : $[sModDir]/feainfo.object"                    -MSG; #   Screen protocol
    object iFi; "$[sModDir]/feainfo.object" iFi /noerror -restore ?error if     #   Load feature information, failed >>
      "FATAL: Cannot load \"$[sModDir]/feainfo.object\""                -ERROR; #     Fatal error
      -1 return;                                                                #     Return error
    end                                                                         #  <<
  end                                                                           # <<
  ( "pfa.dim" 30 -CFG_get ) nDim =;                                             # Default feature vector dimension
  "sfv" sMode == if nMsf nDim =;            end                                 # Feature vector dimension for sfv
  "lfv" sMode == if :iFi.nDim-nMsf: nDim =; end                                 # Feature vector dimension for lfv
  "rnd" sMode == if 10 nDim =;              end                                 # Feature vector dimension for rnd

  var  sOutDir; ( "data" "" -CFG_get_path  ) sOutDir =;                         # Get data folder
  sOutDir "/common/fea/$[sMode]_$[nDim]" + sOutDir =;                           # Make path to output folder
  "\n   - Output dir    : " sOutDir +                                     -MSG; # Screen protocol

 ## Method overwrites            
                                                								# -------------------------------------
 ##".-SIG_import" "function" ?instance if
 ##  /disarm -SIG_import_vm /disarm -SIG_import =;                              #   Overwrite -SIG_import
 ## end

  ## Loop over speech files                                                     # -------------------------------------
  .__CFG_bNwr if "\n   - Write protect : " "ON" -COLOR_yellow + -MSG; end       # Protocol
  "\n\n   Analyzing $[iF.len] turn(s) ..."                                -MSG; # Screen protocol
  0 1 -PBAR;                                                                    # Begin progress bar
  iF -reset; iF -next while                                                     # Get next file from file list >>
    "\n   - $[iF.nfile 1 +]/$[iF.len] $[iF.sfile]: ..."                  -MSG2; #   Screen protocol (verbose level 2)
    :(iF.nfile+1)/iF.len: 1                                              -PBAR; #   Display progress

    "rnd" sMode != if                                                           #   Real feature extraction >>
      ( iF NULL "S" idFea -FEA_get ) not if  " SKIP" -MSG2; continue; end       #     Do primary analysis (force)
      ( "sfv" sMode == ) ( "lfv" sMode == ) ||  if                              #     Computing secondary features >>
        idFea iFi nMsf idSfv idLfv -FEA_sfa;                                    #       Do secondary analysis
        "sfv" sMode == if                                                       #       Most significant features >>
          idSfv idFea =;                                             "." -MSG2; #         Copy result to idFea
        else                                                                    #       << Least sign. features >>
          idLfv idFea =;                                             "." -MSG2; #         Copy result to idFea
        end                                                                     #       <<
      end                                                                       #     <<
    else                                                                        #   << Random features >>
      ( nDim nXR noise ) idFea =;                                               #     Generate white noise
      " nXR=$[idFea.nrec]"                                               -MSG2; #     Screen protocol
    end                                                                         #   <<
    
    idFea NULL idFea -LAB_strip;                                                #   Discard labels
    idFea.dim nDim != if "FALAL: Unexpected feature dimension." -ERROR; quit end#   Check feature vector dimension
    
    "$[sOutDir]/$[iF.sfile].txt" sPath =;                                       #   Make path to feature file
    "\n     - writing " sPath + " ..." +                               3 -MSGX; #   Screen protovcol
    .__CFG_bNwr not if                                                          #   No write protect mode >>
      sPath "ascii" idFea stdfile -export;                                      #     Export as ASCII
      " done"                                                            -MSG2; #     Screen protocol
      "$[sLogDir]/$[sMode]_$[nDim]/$[iF.sfile].dn3" idFea -save;                #     Log as DN3
    else                                                                        #   << Write protect mode >>
      " SKIPPED (write protection on)"                                   -MSG2; #     Screen protocol
    end                                                                         #   <<
  end                                                                           # <<
  "\n   " -MSG2; "done\n"                                                 -MSG; # Finish progress bar
  
  "\n\n// $__SFILE__.xtp completed (${.__UTL_nErrors} errors).\n"         -MSG; # Protocol
  ( .__UTL_nErrors 0 > ) return;                                                # Return error state
}

## Imports a primary feature vector sequence for the GMM speaker classifier.
## This function is intended to overload <code>-FEA_get</code>.
##
## @cgen:index
## @param iF file
##          File list instance
## @param sSns string
##          -- <em>ignored</em> --
## @param sMode string
##          -- <em>ignored</em> --
## @param idFea data
##          Will be filled with the feature vector sequence
## @return <code>TRUE</code> if successful, <code>FALSE</code> otherwise.
## @global .__sDirFea            CRW
## @global .__sExtFea            CRW
## @global .__nVauGmmfeaDim      R
## @global &lt;uasr.dir.fea.&gt; R
## @global &lt;uasr.fea.ext&gt;  R
function -VAU_GMM_FEA_get(iF,sSns,sMode,idFea)
{
  data idLab;                                                                   # Turn label (actual speaker ID)
  ".__sDirFea" "fea"           "S" -CFG_get_path_persistent;                    # Get feature files path
  ".__sExtFea" "fea.ext" "txt" "S" -CFG_get_ex_persistent;                      # Get feature file extension
  var sPath; "$[.__sDirFea]/$[iF.sfile].$[.__sExtFea]" sPath =;                 # Make path of file to import

  "\n     - Loading: " sPath + " ..." +                                3 -MSGX; # Screen protocol
  idFea -reset;                                                                 # Clear feature data
  sPath "ascii" idFea stdfile /noerror -import ?error if                        # Import feature vector file, failed >>
    "Cannot obtain external features. Re-run with option -v3!"      1 -WARNING; #   Warning
    FALSE return;                                                               #   Skip turn
  end                                                                           # <<
  " ok" 3 -MSGX; "."                                                     -MSG2; # Screen protocol
  idFea NULL idFea -LAB_strip;                                                  # Discard labels
  .__nVauGmmfeaDim idFea.dim != if                                              # Check dimension of feature vectors >>
    "Feature vector dimension unexpected ($[idFea.dim], should be "             #   (wrong)
    "$[.__nVauGmmfeaDim])." +                                       1 -WARNING; #   Warning
    FALSE return;                                                               #   Skip turn
  end                                                                           # <<
  iF.recfile.dim 2 < if                                                         # Check file list entry >>
    "File list does not contain turn labels"                        1 -WARNING; #   No labels -> warning
    FALSE return;                                                               #   Skip turn
  end                                                                           # <<
  { "${iF.recfile[0,1]}" 0 $[idFea.nrec] } 0 1 2 idLab -expand;                 # Create turn label track
  idLab idFea -join;                                                 "." -MSG2; # Label turn

  TRUE return;                                                                  # Success!
}

## -- Command handlers for DB.xtp --

## Command handler for <code>DB&#46;xtp</code>: Computes UASR primary feature
## vector files from signal files listed in 
## <code>&lt;uasr&#46;flist&#46;all&gt;</code>. The primary feature type can be 
## configured through <code>&lt;uasr.pfa&gt;</code> (default is "MEL"). Output 
## files are written to 
## <code>&lt;uasr.dir.data&gt;/common/fea/pfv_&lt;uasr.pfa.dim&gt;</code>.
## The output file format is plain text, each line containing one feature vector
## of white space separated floats.
##
## <h4>Example</h4>
## <pre class="code">
## cd $UASR_HOME-data/vau
## DB.xtp pfv common/info/featureanalysis.cfg</pre>
##
## @see -CMD_DB_sfv
## @see -CMD_DB_lfv
## @cgen:index
function -CMD_DB_pfv()
{
  ( "pfv" -VAU_xfa ) return;
}

## Command handler for <code>DB&#46;xtp</code>: Computes UASR secondary feature
## vector files files from signal fileslisted in 
## <code>&lt;uasr&#46;flist&#46;all&gt;</code>. The primary feature type can be 
## configured through <code>&lt;uasr.pfa&gt;</code> (default is "MEL"). Output 
## files are written to 
## <code>&lt;uasr.dir.data&gt;/common/fea/sfv_&lt;uasr.sfa.dim&gt;</code>. The
## output file format is plain text, each line containing one feature vector of 
## white space separated floats.
## <p><b>Note:</b> A feature information file 
## <code>&lt;uasr.dir.model&gt;/feainfo.object</code> as generated by the UASR 
## HMM training tool <code>HMM.xtp trn</code> is required.</p>
##
## <h4>Example</h4>
## <pre class="code">
## cd $UASR_HOME-data/vau
## DB.xtp sfv common/info/featureanalysis.cfg</pre>
##
## @see -CMD_DB_pfv
## @see -CMD_DB_lfv
## @cgen:index
function -CMD_DB_sfv()
{
  ( "sfv" -VAU_xfa ) return;
}

## Command handler for <code>DB&#46;xtp</code>: Computes UASR least significant
## secondary feature vector files files from signal files listed in 
## <code>&lt;uasr&#46;flist&#46;all&gt;</code>. The least significant secondary
## featues comprise the vector components discarded by the PCA. The primary 
## feature type can be configured through <code>&lt;uasr.pfa&gt;</code> (default
## is "MEL"). Output files are written to 
## <code>&lt;uasr.dir.data&gt;/common/fea/lfv_&lt;dim&gt;</code> where 
## <code>dim</code> denotes the number of least significant features (depends on
## the primary and secondary feature extraction settings). The output file 
## format is plain text, each line containing one feature vector of white space 
## separated floats.
## <p><b>Note:</b> A feature information file 
## <code>&lt;uasr.dir.model&gt;/feainfo.object</code> as generated by the UASR 
## HMM training tool <code>HMM.xtp trn</code> is required.</p>
##
## <h4>Example</h4>
## <pre class="code">
## cd $UASR_HOME-data/vau
## DB.xtp lfv common/info/featureanalysis.cfg</pre>
##
## @see -CMD_DB_pfv
## @see -CMD_DB_sfv
## @cgen:index
function -CMD_DB_lfv()
{
  ( "lfv" -VAU_xfa ) return;
}

## Command handler for <code>DB&#46;xtp</code>: Generates 10-dimensional random
## feature vector files of random length in the interval [250&#46;&#46;&#46;350]
## for the files listed in <code>&lt;uasr&#46;flist&#46;all&gt;</code>. Output 
## files are written to <code>&lt;uasr.dir.data&gt;/common/fea/rnd_10</code>. 
## The output file format is plain text, each line containing one feature vector
## of white space separated floats. 
## <p>The function is intended for debugging the GMM  classifier. As there is 
## nothing to be learned from the generated features the classifier correctness 
## is expected to be equal to mere guessing (1/#speakers).</p>
## <p><b>Note:</b> The <code>&lt;uasr.flist.all&gt;</code> file list is used.</p>
##
## @cgen:index
function -CMD_DB_rnd()
{
  ( "rnd" -VAU_xfa ) return;
}

## == Plug-in initialization ==                                                 # =====================================

var sLF; "\n//                   " sLF =;                                       # Line-feed for protocol messages

## Commands supplied to DB.xtp                                                  # -------------------------------------
".-CMD_DB_help" "function" ?instance if                                         # Detect DB.xtp >>
  "- Overloading -CMD_DB_help$[sLF]"                                      -MSG; #   Protocol
  /disarm -CMD_DB_help                                                          #   Override -CMD_DB_help
  {                                                                             #   >>
    "\n   DB.xtp pfv <cfgfile> - Create primary feature vector files"     -echo;#     Protocol (short help)
    "\n   DB.xtp sfv <cfgfile> - Create secondary feature vector files"   -echo;#     Protocol (short help)
    "\n   DB.xtp lfv <cfgfile> - Create least significant fea.vec. files" -echo;#     Protocol (short help)
    "\n   DB.xtp rnd <cfgfile> - Create random feature vector files"      -echo;#     Protocol (short help)
  }                                                                             #   <<
end                                                                             # <<

## Preparation for GMM speaker classification                                   # -------------------------------------
".__sVauGmmfea" "vau.gmmfea" "" -CFG_get_persistent;                            # GMM speaker classifier feature type
.__sVauGmmfea "" != if                                                          # Detect GMM speaker classification >>

  ## Initialization                                                             #   - - - - - - - - - - - - - - - - - -
  "Preparing for speaker classification...$[sLF]"                         -MSG; #   Protocol
  ".__nVauGmmfeaDim" "vau.gmmfea.dim" -1 -CFG_get_persistent;                   #   GMM speaker classifier feature dim.
  .__nVauGmmfeaDim 0 < if "FATAL: vau.gmmfea.dim not set.\n" -ERROR; quit; end  #   El fatal

  ## Configure UASR                                                             #   - - - - - - - - - - - - - - - - - -
  "- Feature type \"$[.__sVauGmmfea]\" ($[.__nVauGmmfeaDim]/0)$[sLF]"     -MSG; #   Protocol
  "uasr.pfa.dim" .__nVauGmmfeaDim -CFG_set;                                     #   Set primary feature dimension
  "uasr.sfa.dim" .__nVauGmmfeaDim -CFG_set;                                     #   Set secondary fea. dim. (no LSF!) 
  "uasr.pfa"     .__sVauGmmfea    -CFG_set;                                     #   Set primary fea. type (for paths)
  "uasr.fea.ext" "txt"            -CFG_set;                                     #   Set feature file extension

  ## Overload functions                                                         #   - - - - - - - - - - - - - - - - - -
  ".-FEA_get" "function" ?instance if                                           #   Function -FEA_get exists >>
    "- Overloading -FEA_get$[sLF]"                                        -MSG; #     Protocol
    /disarm -VAU_GMM_FEA_get /disarm -FEA_get =;                                #       Overload
  end                                                                           #   <<
end                                                                             # <<
## EOF
